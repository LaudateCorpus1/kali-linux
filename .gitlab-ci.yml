
variables:
    BASE_DISTROS: 'kali-rolling kali-dev kali-last-snapshot'
    EXTRA_DISTROS: 'kali-experimental kali-bleeding-edge'
    ARCHS: 'amd64 arm64 armhf'
    DOCKER_BUILDKIT: '1'
    DOCKER_CLI_EXPERIMENTAL: 'enabled'

stages:
    - build
    - register
    - test
    - push

build-rootfs:
    stage: build
    image: debian:testing
    artifacts:
        paths:
            - "*.tar.xz"
            - "*.release.version"
    script: |
        set -e
        apt-get -y update
        apt-get -y install debootstrap qemu-user-static wget
        KEYRING_PKG_URL=$(wget -q -O - http://http.kali.org/kali/dists/kali-rolling/main/binary-amd64/Packages.gz | gzip -dc | grep ^Filename: | grep kali-archive-keyring | head -n 1 | awk '{print $2}')
        KEYRING_PKG_URL="http://http.kali.org/kali/$KEYRING_PKG_URL"
        wget $KEYRING_PKG_URL
        dpkg -i kali-archive-keyring_*_all.deb
        rm -f kali-archive-keyring_*_all.deb
        for distro in $BASE_DISTROS; do
            for arch in $ARCHS; do
                ./build-rootfs.sh "$distro" "$arch"
            done
        done

build-docker-images:
    stage: register
    image: docker:latest
    services:
        - docker:dind
    dependencies:
        - build-rootfs
    artifacts:
        paths:
            - "*.conf"
            - "*.release.version"
    script: |
        set -e
        BUILDX_URL=$(docker run --rm python:rc-alpine sh -c "pip install --quiet lastversion && lastversion --assets --filter linux-amd64 buildx")
        mkdir -p $HOME/.docker/cli-plugins/
        wget -O $HOME/.docker/cli-plugins/docker-buildx $BUILDX_URL
        chmod a+x $HOME/.docker/cli-plugins/docker-buildx
        echo "http://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories
        apk update
        apk add git bash tar pixz
        echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
        for distro in $BASE_DISTROS; do
            for arch in $ARCHS; do
                ./docker-build.sh "$distro" "$arch"
            done
        done
        for distro in $EXTRA_DISTROS; do
            for arch in $ARCHS; do
                ./docker-build-extra.sh "$distro" "$arch"
            done
        done

test-docker-images:
    stage: test
    image: docker:latest
    services:
      - name: docker:dind
        command: ["--experimental"]
    dependencies:
        - build-docker-images
    script: |
        set -e
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
        for architecture in $ARCHS; do
          case "$architecture" in
            amd64) platform="linux/amd64"; plataforma="x86_64" ;;
            arm64) platform="linux/arm64"; plataforma="aarch64" ;;
            armhf) platform="linux/arm/7"; plataforma="armv7l" ;;
          esac
          for distro in $BASE_DISTROS $EXTRA_DISTROS; do
              . ./"${architecture}-${distro}".conf || true
              docker pull --platform "$platform" "$CI_REGISTRY_IMAGE/$IMAGE:$VERSION"
              TEST_ARCH=$(docker run --rm "$CI_REGISTRY_IMAGE/$IMAGE:$VERSION" uname -m)
              if [[ "$plataforma" == "$TEST_ARCH" ]]; then
                echo "OK Architecture correct"
              else
                echo "Error: Architecture incorrect"
                exit 1
              fi
          done
        done

push-docker-images:
    stage: push
    image: docker:latest
    services:
        - docker:dind
    dependencies:
        - build-docker-images
    script: |
        set -e
        apk update
        apk add curl jq gawk
        echo "$CI_JOB_TOKEN" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
        echo "$DOCKER_HUB_ACCESS_TOKEN" | docker login -u "$DOCKER_HUB_USER" --password-stdin "$DOCKER_HUB_REGISTRY"
        # Push images Docker Hub
        for distro in $BASE_DISTROS $EXTRA_DISTROS; do
            for arch in $ARCHS; do
                ./docker-push.sh "$distro" "$arch"
            done
        done
        # Clean tags
        for distro in $BASE_DISTROS $EXTRA_DISTROS; do
            for arch in $ARCHS; do
                ./docker-cleanup.sh "$distro" "$arch"
            done
        done
